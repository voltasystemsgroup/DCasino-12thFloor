/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics, Inc.
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS SoundWeb London Mixer 8-Channel Basic Drive v5.4"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
	version 5.4
	see help file for mixer
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_,Enable_Feedback$,Disable_Feedback$,_skip_,Chan1_Mute$,Chan2_Mute$,Chan3_Mute$,Chan4_Mute$,Chan5_Mute$,Chan6_Mute$,Chan7_Mute$,Chan8_Mute$,MasterOut_Mute$;
ANALOG_INPUT _skip_,Chan_Offset$,_skip_,Chan1_Vol$,Chan2_Vol$,Chan3_Vol$,Chan4_Vol$,Chan5_Vol$,Chan6_Vol$,Chan7_Vol$,Chan8_Vol$,MasterVol$;
STRING_INPUT _skip_,rx$[4000];

DIGITAL_OUTPUT _skip_,_skip_,_skip_,_skip_,Chan1_Mute_FB$,Chan2_Mute_FB$,Chan3_Mute_FB$,Chan4_Mute_FB$,Chan5_Mute_FB$,Chan6_Mute_FB$,Chan7_Mute_FB$,Chan8_Mute_FB$,MasterOut_Mute_FB$;
ANALOG_OUTPUT  _skip_,_skip_,_skip_,Chan1_Vol_FB$,Chan2_Vol_FB$,Chan3_Vol_FB$,Chan4_Vol_FB$,Chan5_Vol_FB$,Chan6_Vol_FB$,Chan7_Vol_FB$,Chan8_Vol_FB$,MasterVol_FB$;
STRING_OUTPUT _skip_,tx$;
/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER ObjectID$[3];
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES ObjectID$   
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   //propBounds = lower_bound , upper_bound;
   propDefaultValue = "\x00\x01\x00"; 

   propShortDescription = "HiQnet Object ID in 3-byte **HEX** ie\x00\x01\x00";
   #BEGIN_PROP_FULL_DESCRIPTION  
    "SEE HELP FILE"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER offset, feedback, stateVar, SV, stateVarSub, stateVarUnSub, iTempNum, iMarker1;
STRING returnString[4];
INTEGER returnI, Chan1_Vol, Chan2_Vol, Chan3_Vol, Chan4_Vol, Chan5_Vol, Chan6_Vol,
		Chan7_Vol, Chan8_Vol, MasterVol;

INTEGER xOKFeedback, xOKChan1_Vol, xOKChan2_Vol, xOKChan3_Vol, xOKChan4_Vol, xOKChan5_Vol,
		xOKChan6_Vol, xOKChan7_Vol, xOKChan8_Vol;
INTEGER i, volume, xOKMasterVol;
STRING tempString[40], sTempSend[100], sObjectIDPadded[10], sNode[6]; 
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function send(STRING str1)
{        
	INTEGER checksum, fiB;
	STRING fsTempReturn[100], sendString[100];
	
	checksum = 0;
	sendString = "";
	for (fiB = 1 to len(str1))                                                               
	{             
		checksum = checksum ^ byte(str1, fiB);
		if (byte(str1, fiB) = 2 || byte(str1, fiB) = 3 || byte(str1, fiB) = 6 || byte(str1, fiB) = 21 || byte(str1, fiB) = 27)
		{     
			makeString(sendString, "%s\x1B%s", sendString, chr(byte(str1, fiB) + 128));
		}               
		else
		{
			makeString(sendString, "%s%s", sendString, chr(byte(str1, fiB)));
		}
	}                  
	if (checksum = 2 || checksum = 3 || checksum = 6 || checksum = 21 || checksum = 27)
	{
		makeString(fsTempReturn, "\x02%s\x1B%s\x03", sendString, chr(checksum+128));
	}
	else
	{                                      
		makeString(fsTempReturn, "\x02%s%s\x03", sendString, chr(checksum));
	}
	return(fsTempReturn);
}

String_Function iToVolumePercent(INTEGER int)
{                 
	// number from 0 - 65535  
	volume = (int*100)/65535;                            
	returnString = "\x00" + chr(volume) + "\x00\x00";
    Return (returnString);
}

Integer_Function volumePercentToI(STRING str)
{   
	INTEGER fraction;                      
	fraction = byte(str,3)*256+byte(str,4);
	if(fraction > 32767)
	{
		volume = ((byte(str, 2)+1)*65535)/100;                  
	}
	else
	{
		volume = (byte(str, 2)*65535)/100;
	}
	returnI = volume;

    Return (returnI);
}

String_Function fPad(STRING fsPad)
{
	INTEGER fiA;
	
	STRING fsReturn[10];
	
	fsReturn = "";
	for(fiA = 1 to len(fsPad))
	{
		if (byte(fsPad, fiA) = 2 || byte(fsPad, fiA) = 3 || byte(fsPad, fiA) = 6 || byte(fsPad, fiA) = 21 || byte(fsPad, fiA) = 27)
		{     
			makeString(fsReturn, "%s\x1B%s", fsReturn, chr(byte(fsPad, fiA) + 128));
		}               
		else
		{
			makeString(fsReturn, "%s%s", fsReturn, chr(byte(fsPad, fiA)));
		}
	}
	return(fsReturn);
}

String_Function fUnpad(STRING str2)
{
	INTEGER j;
	STRING receiveString[100];
	
	receiveString = "";
	for (j = 1 to len(str2))
	{
		if (byte(str2, j) = 27)
		{
			receiveString = receiveString + chr(byte(str2, j+1)-128);	
			j = j+1;
		} 
		else
		{
			receiveString = receiveString + chr(byte(str2, j));
		}
	}    
	while (byte(receiveString, 1) = 6)
	{
		receiveString = right(receiveString, len(receiveString)-1);
	}
	return (receiveString);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
Change Chan_Offset$
{
  	offset = Chan_Offset$*8;//zero for channels 1-8 (no offset); 1 for channels 9-16; 2 for channels 17-24....
}

PUSH Enable_Feedback$
{
	wait(20)
	{ 
		if(xOKFeedback)
		{
			xOKFeedback = 0;
		 	feedback = 1;
		     
			for(i = 1 to 8) //subscribe to all variables for feedback
			{
			    stateVarSub = (((i+offset)-1) * 100) + 1;
				makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MUTE   	    
				tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			    stateVarSub = (((i+offset)-1) * 100);
				makeString(sTempSend, "\x8E%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//Volumes
				tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			}
		
		    stateVarSub = 20001;
			makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Master MUTE   	    
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		    stateVarSub = 20000;
			makeString(sTempSend, "\x8E%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//Master Volume
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKFeedback = 1; 
		}
	}
}

PUSH Disable_Feedback$
{ 
	if(xOKFeedback)
	{
		xOKFeedback = 0;
	 	feedback = 0;
	     
		for(i = 1 to 8) //subscribe to all variables for feedback
		{
		    stateVarSub = (((i+offset)-1) * 100) + 1;
			makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MUTE   	    
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		    stateVarSub = (((i+offset)-1) * 100);
			makeString(sTempSend, "\x8F%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//Volumes
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		}
	
	    stateVarSub = 20001;
		makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Master MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	    stateVarSub = 20000;
		makeString(sTempSend, "\x8F%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//Master Volume
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		xOKFeedback = 1;
	}
}

PUSH Chan1_Mute$
{        
	stateVar = (((1+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
    	makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
    }
}

RELEASE Chan1_Mute$
{        
	stateVar = (((1+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
    	makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
    }
}

PUSH Chan2_Mute$
{        
	stateVar = (((2+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
    	makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

RELEASE Chan2_Mute$
{        
	stateVar = (((2+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
    	makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

PUSH Chan3_Mute$
{        
	stateVar = (((3+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
    	makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

RELEASE Chan3_Mute$
{        
	stateVar = (((3+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
    	makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

PUSH Chan4_Mute$
{        
	stateVar = (((4+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
    	makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

RELEASE Chan4_Mute$
{        
	stateVar = (((4+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

PUSH Chan5_Mute$
{        
	stateVar = (((5+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

RELEASE Chan5_Mute$
{        
	stateVar = (((5+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

PUSH Chan6_Mute$
{        
	stateVar = (((6+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

RELEASE Chan6_Mute$
{        
	stateVar = (((6+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

PUSH Chan7_Mute$
{        
	stateVar = (((7+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string 
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

RELEASE Chan7_Mute$
{        
	stateVar = (((7+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string 
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

PUSH Chan8_Mute$
{        
	stateVar = (((8+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string 
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

RELEASE Chan8_Mute$
{        
	stateVar = (((8+offset)-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string 
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

PUSH MasterOut_Mute$
{        
	stateVar = 20001;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string 
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

RELEASE MasterOut_Mute$
{        
	stateVar = 20001;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	
	if(feedback) //send subscribe (GET) string 
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE Chan1_Vol$
{	
	if(Chan1_Vol <> Chan1_Vol$)
	{   
		if(xOKChan1_Vol)
		{
			xOKChan1_Vol = 0;
			stateVar = (((1+offset)-1) * 100);
    		Chan1_Vol = Chan1_Vol$;
			Chan1_Vol_FB$ = Chan1_Vol$;
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan1_Vol$));		
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKChan1_Vol = 1;
		}
	}
}

CHANGE Chan2_Vol$
{	
	if(Chan2_Vol <> Chan2_Vol$)
	{    
		if(xOKChan2_Vol)
		{
			xOKChan2_Vol = 0;
    		Chan2_Vol = Chan2_Vol$;
			Chan2_Vol_FB$ = Chan2_Vol$;
			stateVar = (((2+offset)-1) * 100);
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan2_Vol$));
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKChan2_Vol = 1;
		}
	}
}

CHANGE Chan3_Vol$
{	
	if(Chan3_Vol <> Chan3_Vol$)
	{   
		if(xOKChan3_Vol)
		{
			xOKChan3_Vol = 0;
    		Chan3_Vol = Chan3_Vol$;
			Chan3_Vol_FB$ = Chan3_Vol$;
			stateVar = (((3+offset)-1) * 100);
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan3_Vol$));		
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKChan3_Vol = 1;
		}
	}
}

CHANGE Chan4_Vol$
{	
	if(Chan4_Vol <> Chan4_Vol$)
	{   
		if(xOKChan4_Vol)
		{
			xOKChan4_Vol = 0;
    		Chan4_Vol = Chan4_Vol$;
			Chan4_Vol_FB$ = Chan4_Vol$;
			stateVar = (((4+offset)-1) * 100);
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan4_Vol$));		
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKChan4_Vol = 1;
		}
	}
}

CHANGE Chan5_Vol$
{	
	if(Chan5_Vol <> Chan5_Vol$)
	{  
		if(xOKChan5_Vol)
		{
			xOKChan5_Vol = 0;
    		Chan5_Vol = Chan5_Vol$;
			Chan5_Vol_FB$ = Chan5_Vol$;
			stateVar = (((5+offset)-1) * 100);
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan5_Vol$));		
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKChan5_Vol = 1;
		}
	}
}

CHANGE Chan6_Vol$
{	
	if(Chan6_Vol <> Chan6_Vol$)
	{   
		if(xOKChan6_Vol)
		{
			xOKChan6_Vol = 0;
    		Chan6_Vol = Chan6_Vol$;
			Chan6_Vol_FB$ = Chan6_Vol$;
			stateVar = (((6+offset)-1) * 100);
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan6_Vol$));		
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKChan6_Vol = 1;
		}
	}
}

CHANGE Chan7_Vol$
{	
	if(Chan7_Vol <> Chan7_Vol$)
	{   
		if(xOKChan7_Vol)
		{
			xOKChan7_Vol = 0;
    		Chan7_Vol = Chan7_Vol$;
			Chan7_Vol_FB$ = Chan7_Vol$;
			stateVar = (((7+offset)-1) * 100);
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan7_Vol$));		
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKChan7_Vol = 1;
		}
	}
}

CHANGE Chan8_Vol$
{	
	if(Chan8_Vol <> Chan8_Vol$)
	{  
		if(xOKChan8_Vol)
		{
			xOKChan8_Vol = 0;
    		Chan8_Vol = Chan8_Vol$;
			Chan8_Vol_FB$ = Chan8_Vol$;
			stateVar = (((8+offset)-1) * 100);
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan8_Vol$));		
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKChan8_Vol = 1;
		}
	}
}

CHANGE MasterVol$
{	
	if(MasterVol <> MasterVol$)
	{       
		if(xOKMasterVol)
		{
			xOKMasterVol = 0;
	    	MasterVol = MasterVol$;
			MasterVol_FB$ = MasterVol$;
			stateVar = 20000;
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(MasterVol$));		
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKMasterVol = 1;
		}
	}
}

function ProcessRxMessage(string paramData)
{
	if(find("Send Name", paramData) > 0)
	{
		iTempNum = atoi(paramData);
		iMarker1 = find("Node ", paramData) + 5;
		sNode = mid(paramData, iMarker1, 2);
		sObjectIDPadded = fPad(objectID$);
		makestring(tx$, "Send Name%d = %s\x03\x03\x03\x03\x03", iTempNum, sObjectIDPadded);
	}
	else if((mid(paramData, 7, 3) = "\x00\x00\x00") || (mid(paramData, 7, len(sObjectIDPadded)) = sObjectIDPadded))
	{
		paramData = fUnpad(paramData);
		SV = ((byte(paramData, 9) * 256 ) + byte(paramData, 10)); //SV
		if(SV MOD 100)
		{
			if(((1+Offset)-1)*100+1 = SV)//mute Chan1
               	Chan1_Mute_FB$ = byte(paramData, 14);
			else if(((2+Offset)-1)*100+1 = SV)//mute Chan2
               	Chan2_Mute_FB$ = byte(paramData, 14);
			else if(((3+Offset)-1)*100+1 = SV)//mute Chan3
               	Chan3_Mute_FB$ = byte(paramData, 14);
			else if(((4+Offset)-1)*100+1 = SV)//mute Chan4
               	Chan4_Mute_FB$ = byte(paramData, 14);
			else if(((5+Offset)-1)*100+1 = SV)//mute Chan5
               	Chan5_Mute_FB$ = byte(paramData, 14);
			else if(((6+Offset)-1)*100+1 = SV)//mute Chan6
               	Chan6_Mute_FB$ = byte(paramData, 14);
			else if(((7+Offset)-1)*100+1 = SV)//mute Chan7
               	Chan7_Mute_FB$ = byte(paramData, 14);
			else if(((8+Offset)-1)*100+1 = SV)//mute Chan8
               	Chan8_Mute_FB$ = byte(paramData, 14);
			else if(20001 = SV)//MasterMute
               	MasterOut_Mute_FB$ = byte(paramData, 14);
		}
		else //gain
		{
			if(((1+Offset)-1)*100 = SV)//Volume Channel 1
			{
				Chan1_Vol = volumePercentToI(mid(paramData, 11, 4));
				Chan1_Vol_FB$ = Chan1_Vol;
			}
			else if(((2+Offset)-1)*100 = SV)//Volume Channel 2
			{
				Chan2_Vol = volumePercentToI(mid(paramData, 11, 4));
				Chan2_Vol_FB$ = Chan2_Vol;
			}
			else if(((3+Offset)-1)*100 = SV)//Volume Channel 3
			{
				Chan3_Vol = volumePercentToI(mid(paramData, 11, 4));
				Chan3_Vol_FB$ = Chan3_Vol;
			}
			else if(((4+Offset)-1)*100 = SV)//Volume Channel 4
			{
				Chan4_Vol = volumePercentToI(mid(paramData, 11, 4));
				Chan4_Vol_FB$ = Chan4_Vol;
			}
			else if(((5+Offset)-1)*100 = SV)//Volume Channel 5
			{
				Chan5_Vol = volumePercentToI(mid(paramData, 11, 4));
				Chan5_Vol_FB$ = Chan5_Vol;
			}
			else if(((6+Offset)-1)*100 = SV)//Volume Channel 6
			{
				Chan6_Vol = volumePercentToI(mid(paramData, 11, 4));
				Chan6_Vol_FB$ = Chan6_Vol;
			}
			else if(((7+Offset)-1)*100 = SV)//Volume Channel 7
			{
				Chan7_Vol = volumePercentToI(mid(paramData, 11, 4));
				Chan7_Vol_FB$ = Chan7_Vol;
			}
			else if(((8+Offset)-1)*100 = SV)//Volume Channel 8
			{
				Chan8_Vol = volumePercentToI(mid(paramData, 11, 4));
				Chan8_Vol_FB$ = Chan8_Vol;
			}
			else if(20000 = SV)//Volume Master Out
			{
				MasterVol = volumePercentToI(mid(paramData, 11, 4));
				MasterVol_FB$ = MasterVol;
			}
		}
	}
}

#if_series3
THREADSAFE CHANGE rx$
{
	while(1)
	{
		try
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}
		catch
		{
			generateusernotice("BSS SoundWeb London Mixer 8-Channel Basic Error: %s", getexceptionmessage());
		}
	}
}
#else
integer semaphore;
CHANGE rx$
{
	if(semaphore = 0)
	{
		semaphore = 1;
		while(1)
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}
		semaphore = 0;
	}
}
#endif
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	Offset = 0; 
	xOKFeedback = 1;
	xOKMasterVol = 1; 
	xOKChan1_Vol = 1;
	xOKChan2_Vol = 1;
	xOKChan3_Vol = 1;
	xOKChan4_Vol = 1;
	xOKChan5_Vol = 1;
	xOKChan6_Vol = 1;
	xOKChan7_Vol = 1;
	xOKChan8_Vol = 1;
#if_series2
	semaphore = 0;
#endif
}
