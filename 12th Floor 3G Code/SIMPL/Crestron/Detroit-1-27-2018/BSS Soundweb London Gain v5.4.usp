/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics, Inc.
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS SoundWeb London Gain Drive v5.4"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE 
#HELP_PDF_FILE "bss soundweb london gain help.pdf"
#ENABLE_STACK_CHECKING
// #ENABLE_TRACE

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_, subscribe$, unSubscribe$;
DIGITAL_INPUT _skip_, mute$, unMute$;
DIGITAL_INPUT _skip_, polarityOn$, polarityOff$;

ANALOG_INPUT _skip_, gain$;

BUFFER_INPUT _skip_, rx$[4000];

DIGITAL_OUTPUT _skip_, _skip_, _skip_, _skip_, mute_fb$, _skip_, _skip_, polarity_fb$;
ANALOG_OUTPUT _skip_, _skip_, gain_fb$;
STRING_OUTPUT _skip_, tx$;
/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER objectID$[3];
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES objectID$
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "\x00\x00\x00"; 
   //propList = {"A","A"},{"B","B"},{"C","C"},{"D","D"};  
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER subscribe, volume, iTempNum, iMarker1;
STRING returnString[4], sNode[6], sTempSend[100];
INTEGER returnI;

INTEGER xOKSubscribe, volumeInput, xOkGain;
STRING tempString[40], sObjectIDPadded[10];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function send(STRING str1)
{        
	INTEGER checksum, fiB;
	STRING fsTempReturn[100], sendString[100];
	
	checksum = 0;
	sendString = "";
	for (fiB = 1 to len(str1))                                                               
	{             
		checksum = checksum ^ byte(str1, fiB);
		if (byte(str1, fiB) = 2 || byte(str1, fiB) = 3 || byte(str1, fiB) = 6 || byte(str1, fiB) = 21 || byte(str1, fiB) = 27)
		{     
			makeString(sendString, "%s\x1B%s", sendString, chr(byte(str1, fiB) + 128));
		}               
		else
		{
			makeString(sendString, "%s%s", sendString, chr(byte(str1, fiB)));
		}
	}                  
	if (checksum = 2 || checksum = 3 || checksum = 6 || checksum = 21 || checksum = 27)
	{
		makeString(fsTempReturn, "\x02%s\x1B%s\x03", sendString, chr(checksum+128));
	}
	else
	{                                      
		makeString(fsTempReturn, "\x02%s%s\x03", sendString, chr(checksum));
	}
	return(fsTempReturn);
}

String_Function iToVolumePercent(INTEGER int)
{                 
	// number from 0 - 65535  
	volume = (int*100)/65535;                            
	returnString = "\x00" + chr(volume) + "\x00\x00";
    Return (returnString);
}

Integer_Function volumePercentToI(STRING str)
{   
	INTEGER fraction;                      
	fraction = byte(str,3)*256+byte(str,4);
	if(fraction > 32767){
		volume = ((byte(str, 2)+1)*65535)/100;                  
	}
	else{
		volume = (byte(str, 2)*65535)/100;
	}
	returnI = volume;

    Return (returnI);
}

String_Function fPad(STRING fsPad)
{
	INTEGER fiA;
	
	STRING fsReturn[10];
	
	fsReturn = "";
	for(fiA = 1 to len(fsPad))
	{
		if (byte(fsPad, fiA) = 2 || byte(fsPad, fiA) = 3 || byte(fsPad, fiA) = 6 || byte(fsPad, fiA) = 21 || byte(fsPad, fiA) = 27)
		{     
			makeString(fsReturn, "%s\x1B%s", fsReturn, chr(byte(fsPad, fiA) + 128));
		}               
		else
		{
			makeString(fsReturn, "%s%s", fsReturn, chr(byte(fsPad, fiA)));
		}
	}
	return(fsReturn);
}

String_Function fUnpad(STRING str2)
{
	INTEGER j;
	STRING receiveString[100];
	
	receiveString = "";
	for (j = 1 to len(str2))
	{
		if (byte(str2, j) = 27)
		{
			receiveString = receiveString + chr(byte(str2, j+1)-128);	
			j = j+1;
		} 
		else
		{
			receiveString = receiveString + chr(byte(str2, j));
		}
	}    
	while (byte(receiveString, 1) = 6)
	{
		receiveString = right(receiveString, len(receiveString)-1);
	}
	return (receiveString);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH mute$
{
	makeString(sTempSend, "\x88%s\x03%s\x00\x01\x00\x00\x00\x01", sNode, objectID$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe$)
	{
   		makeString(sTempSend, "\x89%s\x03%s\x00\x01\x00\x00\x00\x00", sNode, objectID$);  //Subscribe MUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH unMute$
{
	makeString(sTempSend, "\x88%s\x03%s\x00\x01\x00\x00\x00\x00", sNode, objectID$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe$)
	{
   		makeString(sTempSend, "\x89%s\x03%s\x00\x01\x00\x00\x00\x00", sNode, objectID$);  //Subscribe MUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}

}

PUSH polarityOn$
{
	makeString(sTempSend, "\x88%s\x03%s\x00\x02\x00\x00\x00\x01", sNode, objectID$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe$)
	{
   		makeString(sTempSend, "\x89%s\x03%s\x00\x02\x00\x00\x00\x00", sNode, objectID$);  //POLARITY
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}


PUSH polarityOff$
{
	makeString(sTempSend, "\x88%s\x03%s\x00\x02\x00\x00\x00\x00", sNode, objectID$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe$)
	{
   		makeString(sTempSend, "\x89%s\x03%s\x00\x02\x00\x00\x00\x00", sNode, objectID$);  //POLARITY
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}


CHANGE gain$
{
	if(volumeInput <> gain$)
	{	 
		if(xOkGain) 
		{              
			xOkGain = 0;
			volumeInput = gain$;
			gain_fb$ = gain$;                            	
			makeString(sTempSend, "\x8D%s\x03%s\x00\x00%s", sNode, objectID$, iToVolumePercent(gain$));
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOkGain = 1;
		}
	}
}
  

PUSH subscribe$
{
	wait(20)
	{
        if(xOKSubscribe)
        {
       		xOKSubscribe = 0;
			makeString(sTempSend, "\x8E%s\x03%s\x00\x00\x00\x00\x00\x00", sNode, objectID$);  //GAIN
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x89%S\x03%s\x00\x01\x00\x00\x00\x00", sNode, objectID$);  //MUTE
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x89%s\x03%s\x00\x02\x00\x00\x00\x00", sNode, objectID$);  //POLARITY
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();  
			xOKSubscribe = 1;
		}
	}                        
}  


PUSH unSubscribe$
{
	if(xOKSubscribe)
	{
		xOKSubscribe = 0;
		makeString(sTempSend, "\x8F%s\x03%s\x00\x00\x00\x00\x00\x00", sNode, objectID$);  //GAIN
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
		makeString(sTempSend, "\x8A%s\x03%s\x00\x01\x00\x00\x00\x00", sNode, objectID$);  //MUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
		makeString(sTempSend, "\x8A%s\x03%s\x00\x02\x00\x00\x00\x00", sNode, objectID$);  //POLARITY
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();  
		xOKSubscribe = 1;
	}
}  

function ProcessRxMessage(string paramData)
{
	if(find("Send Name", paramData) > 0)
	{
		iTempNum = atoi(paramData);
		iMarker1 = find("Node ", paramData) + 5;
		sNode = mid(paramData, iMarker1, 2);
		sObjectIDPadded = fPad(objectID$);
		makestring(tx$, "Send Name%d = %s\x03\x03\x03\x03\x03", iTempNum, sObjectIDPadded);
	}
	else if((mid(paramData, 7, 3) = "\x00\x00\x00") || (mid(paramData, 7, len(sObjectIDPadded)) = sObjectIDPadded))
	{                 
		paramData = fUnpad(paramData);
		switch(byte(paramData, 10))
		{
			case (0):
			{  
				volumeInput = volumePercentToI(mid(paramData, 11, 4));
				gain_fb$ = (volumeInput);
			}
			case (1):
			{
				mute_fb$ = byte(paramData, 14);
			}
			case (2):
			{
				polarity_fb$ = byte(paramData, 14);
			}
		}
	}
}

#if_series3
THREADSAFE CHANGE rx$
{
	while(1)
	{
		try
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}
		catch
		{
			generateusernotice("BSS SoundWeb London Gain Error: %s", getexceptionmessage());
		}
	}
}
#else
integer semaphore;
CHANGE rx$
{
	if(semaphore = 0)
	{
		semaphore = 1;
		while(1)
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}
		semaphore = 0;
	}
}
#endif
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	xOkGain = 1; 
	xOKSubscribe = 1;
	subscribe = 0;
#if_series2
	semaphore = 0;
#endif
}
